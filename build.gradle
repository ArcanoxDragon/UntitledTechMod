def loadConfig(name) {
    def cfgFile = file("${name}.properties")
    return cfgFile.withReader {
        def prop = new Properties()
        prop.load(it)
        return new ConfigSlurper().parse(prop)
    }
}

ext {
    // load mod details and put them in a project property
    mod = loadConfig("mod")
}

buildscript {
    repositories {
        jcenter()

        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'

        // Depend on the Kotlin plugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

// Activate the Kotlin plugin
apply plugin: 'kotlin'

version = "${ext.mod.version}.${ext.mod.build_number}"
group = ext.mod.group
archivesBaseName = ext.mod.id

repositories {
    // Forgelin repository
    maven { url = "http://mvn.rx14.co.uk/shadowfacts/" }
}

// region Java Source Compat

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

// endregion

// Shade configuration for any libraries that need to be shaded into the JAR
configurations {
    shade
    compile.extendsFrom shade
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = mappings_version

    // Replace the version specifier in the mod's main class
    replace "@VERSION@", project.version
    replaceIn "TechMod.kt"
}

dependencies {
    // Kotlin dependencies
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "net.shadowfacts:Forgelin:1.4.1"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace mcmod.info stuff
        expand 'version': project.version,
                'mcversion': project.minecraft.version,
                'modid': project.ext.mod.id,
                'modname': project.ext.mod.name
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    // Shading
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}