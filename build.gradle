buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://dl.bintray.com/kotlin/kotlin-eap" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4-M1"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.wynprice.cursemaven" version "2.1.1"
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle'

repositories {
    maven {
        name = "Kotlin Early Access"
        url = "https://dl.bintray.com/kotlin/kotlin-eap"
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

// Read mod config
def loadConfig(name) {
    def cfgFile = file("${name}.properties")
    return cfgFile.withReader {
        def prop = new Properties()
        prop.load(it)
        return new ConfigSlurper().parse(prop)
    }
}

ext {
    // load mod details and put them in a project property
    mod = loadConfig("mod")
}

version = "${mod.version}"
group = "${mod.group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod.id}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // MCP Mappings
    mappings channel: 'snapshot', version: '20200225-1.15.1'

    // Run configurations
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                techmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                techmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                techmod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Forge itself
    minecraft "net.minecraftforge:forge:1.15.2-${mod.forgeVersion}"

    // Kotlin stuff
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.72"
    implementation 'thedarkcolour:kotlinforforge:1.2.1'

    // Runtime mods
    runtimeOnly fg.deobf("curse.maven:mcjtylib:2908605")
    runtimeOnly fg.deobf("curse.maven:rftoolsbase:2908606")
    runtimeOnly fg.deobf("curse.maven:xnet:2908610")
}

compileKotlin {
    // Needed if you use Forge.kt
    // and Kotlin 1.4 language features
    kotlinOptions {
        jvmTarget = '1.8'
        languageVersion = '1.4'
        apiVersion = '1.4'
    }

    // Required to run in dev environment
    copy {
        from "$buildDir/classes/kotlin/main" into "$buildDir/classes/java/main"
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version,
                'modid': project.ext.mod.id,
                'modname': project.ext.mod.name
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod.id}",
                "Specification-Vendor"    : "${mod.author}",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${mod.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

shadowJar {
    classifier ""

    dependencies {
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib:.*'))
    }

    relocate 'kotlin', 'me.arcanox.kotlin'

    minimize()
}