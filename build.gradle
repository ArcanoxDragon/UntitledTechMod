buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://dl.bintray.com/kotlin/kotlin-eap" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.wynprice.cursemaven" version "2.1.1"
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

repositories {
    maven {
        name = "Kotlin Early Access"
        url = "https://dl.bintray.com/kotlin/kotlin-eap"
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

version = "${mod_version}"
group = "${mod_group}"    // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_id}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// Add kotlin folder to main sourceSet
sourceSets.main.java.srcDirs += "src/main/kotlin"

minecraft {
    // MCP Mappings
    mappings channel: 'snapshot', version: "${mcp_mappings}"

    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data = {
            workingDirectory project.file('run').canonicalPath
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'techmod', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            source sourceSets.main
        }
    }
}

dependencies {
    // Forge itself
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Kotlin stuff
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.72"
    implementation 'thedarkcolour:kotlinforforge:1.6.2'
}

compileKotlin {
    // Needed if you use Forge.kt
    // and Kotlin 1.4 language features
    kotlinOptions {
        jvmTarget = '1.8'
        languageVersion = '1.4'
        apiVersion = '1.4'
    }

    // Required to run in dev environment
    copy {
        from "$buildDir/classes/kotlin/main" into "$buildDir/classes/java/main"
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version,
                'modid': mod_id,
                'modname': mod_name
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "${mod_author}",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Vendor"   : "${mod_author}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task apiJar(type: Jar) {
    archiveClassifier.set("api")

    from(sourceSets.main.output) {
        include "me/arcanox/techmod/api/**"
        exclude "me/arcanox/techmod/api/impl/**"
        exclude "me/arcanox/techmod/api/ApiInit.class"
    }
}

artifacts {
    archives apiJar
}

shadowJar {
    classifier ""

    dependencies {
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib:.*'))
    }

    relocate 'kotlin', 'me.arcanox.kotlin'

    minimize()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}